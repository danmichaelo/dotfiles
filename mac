# vi:ft=sh et sw=4 ts=4 ai

SHELL=/usr/local/bin/bash

################################################################################
# Mac-specific things
# if [ "$(uname)" == Darwin ]; then
################################################################################

# ========================= NON-INTERACTIVE STUFF ==============================
# (Keep this to a minimum to speed up e.g. MacVim startup)

export LC_ALL="en_US.UTF-8"
#export CURL_CA_BUNDLE=/usr/local/etc/openssl/cacert.pem

export NLTK_DATA=/Users/danmichael/nltk_data
export PYWIKIBOT2_DIR=/Users/danmichael/projects/wp/pywikibot

test -z "$SUBSHELL" && {
    # Don't add to subshells
    #path_append /opt/local/lib/gromacs/bin
    path_prepend /opt/local/Library/Frameworks/Python.framework/Versions/Current/bin
    path_append /Users/danmichael/pear/bin
    path_append /Users/danmichael/node_modules/.bin
    path_append /opt/local/libexec/perl5.18/sitebin
    path_append $HOME/.git-semantic-commits

    #path_append /opt/espresso/bin
    #path_append $HOME/source/python/ase/tools
    #path_append /usr/local/cuda/bin
    #path_append /opt/p4vasp/bin

    #path_prepend /opt/openmpi/bin
    #path_append DYLD_LIBRARY_PATH /opt/openmpi/lib
    #path_append LD_LIBRARY_PATH /opt/openmpi/lib

    path_append MANPATH /usr/share/man
    path_append MANPATH /usr/local/man
    path_append MANPATH /opt/X11/share/man
    path_append MANPATH /opt/openmpi/share/man

    #path_append "$HOME/Documents/Studier/Master/scripts"
    # path_append PYTHONPATH "$HOME/Documents/Studier/Master/scripts"
    #path_append "$HOME/code/python/oppvasp/scripts"
    #path_append PYTHONPATH "$HOME/code/python/oppvasp/scripts"
    #path_append PYTHONPATH /opt/local/Library/Frameworks/Python.framework/Versions/Current/lib/python2.7/site-packages

    #path_append PYTHONPATH /usr/local/lib/python2.7/site-packages
    #path_append PYTHONPATH "$HOME/includes/python2.7"
    #path_append PYTHONPATH $HOME/code/python
    #path_append PYTHONPATH $HOME/lib/python
    #path_append PYTHONPATH $HOME/lib/python2.7/site-packages
    #path_append PYTHONPATH /opt/p4vasp/lib/python2.4/site-packages

    path_prepend PERL5LIB $HOME/lib/perl

    PERL_MB_OPT="--install_base \"/Users/danmichael/perl5\""; export PERL_MB_OPT;
    PERL_MM_OPT="INSTALL_BASE=/Users/danmichael/perl5"; export PERL_MM_OPT;

    # MacPorts
    # path_prepend /opt/local/sbin
    # path_prepend /opt/local/bin
    # path_prepend MANPATH /opt/local/share/man
    #path_prepend DYLD_LIBRARY_PATH /opt/local/lib
    #path_prepend LD_LIBRARY_PATH /opt/local/lib
    #path_prepend /opt/local/lib

    # Homebrew
    path_prepend /usr/local/bin
    path_prepend /usr/local/sbin
    path_prepend /usr/local/opt/coreutils/libexec/gnubin

    # Homebrew/Perlbrew
    # http://polymake.org/doku.php/howto/mac_homebrew
    source $HOME/perl5/perlbrew/etc/bashrc
    path_append $HOME/perl5/bin
    export PERL5LIB=$HOME/perl5/lib/perl5:$HOME/perl5${PERL5LIB+:$PERL5LIB}

    # TexLive
    path_append /usr/texbin

    # RVM
    path_append "$HOME/rvm/bin"

    # JAVA
    export JAVA_HOME="`/usr/libexec/java_home -v 9.0`"

    # Android SDK
    path_append "/Users/danmichael/Library/Android/sdk/platform-tools"
    path_append "/Users/danmichael/Library/Android/sdk/tools"
    export ANDROID_HOME="/Users/danmichael/Library/Android/sdk"
    # Apache Maven
    #export M2_HOME="$HOME/dev/apache-maven-3.2.3"
    #export M2="$M2_HOME/bin"
    #path_append "$M2"

    # Tomcat
    # export CATALINA_HOME="$HOME/dev/apache-tomcat-7.0.55"
    # $CATALINA_HOME/bin/setclasspath.sh

    # Stardog
    export STARDOG_HOME=/Users/danmichael/dev/stardog-2.1.1
    path_append "$STARDOG_HOME/bin"

    # GO
    export GOPATH=/Users/danmichael/gocode
    path_append $GOPATH/bin

    # GRADLE
    export GRADLE_HOME=/opt/local/share/java/gradle

    # Various
    path_append "$HOME/bin"

}

test -z "$INTERACTIVE" && {
    # Shell is non-interactive (something like scp). We should exit now!
	return
}
# =========================== INTERACTIVE STUFF ================================

export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced

# Aliases: See ~/ .aliases

# Build options {{{

# clang supports the -arch parameter, which macports gcc does not support
# make scripts for mac may therefore expect -arch to be supported, so
# defaulting to clang may be a good idea
export CC=clang
export CXX=clang

# For å linke mot originale systembibliotek, kan det noen ganger lønne seg å
# kompilere på samme måte som bibliotekene. Standarden i Snow Leopard er
# fat binary som inkluderer Intel 32 bit, Intel 64 bit og PowerPC
export MACOSX_DEPLOYMENT_TARGET=10.13
export CMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/

# }}}

# umask 022   # turn off w for g,o (default)
umask 022

# Show man pages in Preview.
# Usage: manp <cmd>
manp() {
    man -t "${1}" | open -f -a Preview
}

# Quit a desktop app.
# Usage: quit <cmd>
quit () {
    osascript -e "tell app \"$1\" to quit"
}

test -z "$SUBSHELL" && {

    echo -e "{ mac }\c"

    # Print a reminder to self
    # echo -e "[$CFLAGS]\c"

    export JENAROOT="$HOME/dev/apache-jena-2.13.0"
    path_append "$JENAROOT/bin"

    # NVM
    echo -e " [NVM]\c"
    export NVM_DIR="$HOME/.nvm"
    . "/usr/local/opt/nvm/nvm.sh"

    # Pyenv (Note: Load NVM before Pyenv!)
    echo -e " [Pyenv]\c"
    if which pyenv > /dev/null; then
        eval "$(pyenv init -)";
    fi
    if which pyenv-virtualenv-init > /dev/null; then
        eval "$(pyenv virtualenv-init -)";
    fi
    # PYENV_ROOT="$HOME/.pyenv"

    # Docker $ docker-machine env default
    export DOCKER_TLS_VERIFY="1"
    export DOCKER_HOST="tcp://192.168.99.100:2376"
    export DOCKER_CERT_PATH="/Users/danmichael/.docker/machine/machines/default"
    export DOCKER_MACHINE_NAME="default"
}
