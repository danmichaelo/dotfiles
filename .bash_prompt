#!/bin/sh
# Interaction prompt:
#
# export PS1="\w\$ "   		# Set default interaction prompt
#
# \[    This sequence should appear before a sequence of characters
#       that don't move the cursor (like color escape sequences).
#       This allows bash to calculate word wrapping correctly.
# \]    This sequence should appear after a sequence of non-printing characters.
#
# \e[30m\]  Color: Black - regular
# \t        the current time in 24-hour HH:MM:SS format
# \[\e[m\]  Reset color
# \w        the current working directory

export GIT_PS1_SHOWDIRTYSTATE=1 #... untagged(*) and staged(+) changes
export GIT_PS1_SHOWSTASHSTATE=1 #... if something is stashed($)
export GIT_PS1_SHOWUNTRACKEDFILES=1 #... untracked files(%)


function updatePrompt {

    history -a   # Save bash history in realtime
    # history -r   # Read history (could this slow things down if the history is long?)

    # Styles
    local RED='\[\e[0;31m\]'
    local RED_UNDERLINE='\[\e[4;31m\]'
    local GREEN='\[\e[38;5;122m\]'
    local COL2='\[\e[48;5;235m\]\[\e[38;5;248m\]'
    local BLUE='\[\e[0;34m\]'
    local RESET='\[\e[0m\]'

    local PROMPT=""

    # The current time in 24-hour HH:MM:SS format
    PROMPT="${GREEN}\t ${COL2}\u@\h${RESET} \W "

    # Return value of last command
    local RET=$?
    if [[ $RET != 0 ]]; then
        PROMPT="$PROMPT${RED_UNDERLINE}[$RET]${RESET} "
    fi

    # Current Git repo
    if type "__git_ps1" > /dev/null 2>&1; then
        PROMPT="$PROMPT$(__git_ps1 "${GREEN}(%s)${RESET}")"
    fi

    # Current Python env
    local PYVV=""
    if hash pyenv > /dev/null 2>&1; then
        if [[ "$HOME" == "$REAL_HOME" ]]; then
            PYVV="$(pyenv version)"
            PYVV="${PYVV%% (*)}@"  # ${OS%% (*}  # '%% (': Remove anything that follows ' ('
        fi
    fi
    if [[ $VIRTUAL_ENV != "" ]]; then
        PYVV="${PYVV}${VIRTUAL_ENV##*/}@"   # '##*/': Remove anything until the last '/'
    fi
    if [[ -n "$PYVV" ]]; then
        PYVV="{${PYVV%@}}"  # Remove : suffix
        PROMPT="${PROMPT}${BLUE}${PYVV}${RESET}"
    fi

    # http://superuser.com/a/313172
    # \e]2; is the escape sequence to print things in the titlebar.
    # The format below will allow Terminal.app to open new
    # tabs in the same working directory, apparently reading
    # the information from the titlebar
    PROMPT="$PROMPT\[\e]2;\u@\H \w\a\]"

    if [ "${TERM}" = "xterm" -o "${TERM}" = "xterm-color" ]; then 
        if [ -n "${XTITLE}" ]; then
            echo -ne "\033]0;${XTITLE}\007"
        else
            local WDIR=`echo ${PWD} | sed -e "s@${HOME}@\~@"`
            echo -ne "\033]0;${USER}@${SHOSTNAME}:${WDIR}\007" 
        fi
    fi

    PS1="$PROMPT\$ "
}

export -f updatePrompt  # export function

# Bash shell executes this function just before displaying the PS1 variable
export PROMPT_COMMAND='updatePrompt'
export PS2=" > "            # Set continuation interactive prompt

